/**
 * Script de Teste para Sistema de Lista Negra do Login
 *
 * Como usar:
 * 1. Navegue at√© a p√°gina de login
 * 2. Abra o console do navegador (F12)
 * 3. Cole este c√≥digo completo no console
 * 4. Pressione Enter para executar
 */

/* eslint-env browser */
/* eslint-disable no-console */

(function() {
    'use strict';

    console.log('=== TESTE DE FUNCIONALIDADE DE LISTA NEGRA ===');

    // Fun√ß√£o para aguardar o componente estar dispon√≠vel
    function waitForLoginComponent(callback, maxAttempts = 10) {
        let attempts = 0;

        function check() {
            attempts++;

            if (window.loginComponent) {
                callback(window.loginComponent);
                return;
            }

            if (attempts < maxAttempts) {
                console.log(`Tentativa ${attempts}: Aguardando componente de login...`);
                setTimeout(check, 1000);
            } else {
                console.error('‚ùå Componente de login n√£o encontrado ap√≥s', maxAttempts, 'tentativas.');
                console.log('üí° Certifique-se de estar na p√°gina de login do Angular.');
                console.log('üí° O componente pode n√£o ter sido inicializado ainda.');
            }
        }

        check();
    }

    // Fun√ß√£o principal de teste
    function runTests(loginComp) {
        console.log('‚úÖ Componente de login encontrado!');

        try {
            // Teste 1: Verificar status inicial
            console.log('\n--- Teste 1: Status inicial da lista negra ---');
            const initialStatus = loginComp.adminManageBlacklist('list');
            console.log('üìä Status:', initialStatus);

            // Teste 2: Testar comando inv√°lido
            console.log('\n--- Teste 2: Testando comando inv√°lido ---');
            const invalidResult = loginComp.adminManageBlacklist('invalid');
            console.log('‚ö†Ô∏è Resultado:', invalidResult);

            // Teste 3: Testar remo√ß√£o (se houver usu√°rios)
            if (initialStatus.blacklisted && initialStatus.blacklisted.length > 0) {
                console.log('\n--- Teste 3: Testando remo√ß√£o de usu√°rio ---');
                const userToRemove = initialStatus.blacklisted[0];
                console.log('üîÑ Removendo usu√°rio:', userToRemove);

                const removeResult = loginComp.adminManageBlacklist('remove', userToRemove);
                console.log('‚úÖ Resultado:', removeResult);

                // Verificar status ap√≥s remo√ß√£o
                const statusAfterRemove = loginComp.adminManageBlacklist('list');
                console.log('üìä Status ap√≥s remo√ß√£o:', statusAfterRemove);

                // Re-adicionar para n√£o afetar o sistema
                console.log('üîÑ Re-adicionando usu√°rio para manter estado original...');
                // Nota: N√£o h√° fun√ß√£o p√∫blica para adicionar, isso √© feito automaticamente

            } else {
                console.log('\n--- Teste 3: Nenhum usu√°rio na lista negra ---');
                console.log('‚úÖ Lista negra est√° vazia - isso √© bom!');
            }

            // Teste 4: Informa√ß√µes sobre failed attempts
            if (initialStatus.failedAttempts && Object.keys(initialStatus.failedAttempts).length > 0) {
                console.log('\n--- Teste 4: Tentativas falhadas registradas ---');
                console.log('üìã Tentativas falhadas:', initialStatus.failedAttempts);
            } else {
                console.log('\n--- Teste 4: Nenhuma tentativa falhada registrada ---');
                console.log('‚úÖ Nenhuma tentativa falhada - sistema limpo!');
            }

            // Instru√ß√µes para teste manual
            console.log('\n--- INSTRU√á√ïES PARA TESTE MANUAL ---');
            console.log('üß™ Para testar a funcionalidade completa:');
            console.log('1Ô∏è‚É£ Digite um nome de usu√°rio v√°lido');
            console.log('2Ô∏è‚É£ Digite uma senha INCORRETA');
            console.log('3Ô∏è‚É£ Clique em "Login" - voc√™ ver√°: "Credenciais inv√°lidas. Voc√™ tem 2 tentativas restantes."');
            console.log('4Ô∏è‚É£ Repita com senha incorreta - voc√™ ver√°: "Aten√ß√£o: voc√™ tem apenas mais 1 tentativa..."');
            console.log('5Ô∏è‚É£ Repita novamente - voc√™ ver√°: "Usu√°rio bloqueado por m√∫ltiplas tentativas..."');
            console.log('6Ô∏è‚É£ Use os comandos abaixo para gerenciar a lista negra');

            console.log('\n--- COMANDOS ADMINISTRATIVOS DISPON√çVEIS ---');
            console.log('üìã Listar status:');
            console.log('   window.loginComponent.adminManageBlacklist("list")');

            console.log('üóëÔ∏è Remover usu√°rio espec√≠fico:');
            console.log('   window.loginComponent.adminManageBlacklist("remove", "nome_usuario")');

            console.log('üßπ Limpar toda a lista negra:');
            console.log('   window.loginComponent.adminManageBlacklist("clear")');

            console.log('\n--- EXEMPLO DE USO ---');
            console.log('// Verificar status atual');
            console.log('let status = window.loginComponent.adminManageBlacklist("list");');
            console.log('console.log(status);');
            console.log('');
            console.log('// Remover usu√°rio espec√≠fico (substitua "usuario@teste.com" pelo nome real)');
            console.log('window.loginComponent.adminManageBlacklist("remove", "usuario@teste.com");');
            console.log('');
            console.log('// Limpar toda a lista (cuidado!)');
            console.log('window.loginComponent.adminManageBlacklist("clear");');

        } catch (error) {
            console.error('‚ùå Erro durante os testes:', error);
            console.log('üí° Certifique-se de que o componente foi carregado corretamente.');
        }
    }

    // Verificar se j√° est√° dispon√≠vel ou aguardar
    if (window.loginComponent) {
        runTests(window.loginComponent);
    } else {
        console.log('‚è≥ Componente n√£o encontrado imediatamente. Aguardando...');
        waitForLoginComponent(runTests);
    }

    console.log('\n=== FIM DO TESTE ===');

})();
